---
title: "FinalLab_bt_empire"
author: "Maximilien de La Ruelle"
format: html
echo: false
message: false
---

[Link](https://github.com/max8471/bt_empire) to the github repository

# 1 - Main Data Set Import
```{r, message=FALSE}
library(ggplot2)
library(vroom)
library(dplyr)
library(tidyr)
library(here)
library(knitr)
here::i_am("bt_empire.Rproj")
```

```{r}
df<-vroom(file=here("DataFolder/THESYSTEMS.csv"),delim=":",na="NA",show_col_types=FALSE)
```

### Q3
```{r}
num_star_systems=nrow(df)
if (num_star_systems == 1051) {
  message("Data loading is successful")
} else {
  message("Data loading failed")
}
```

```{r}
variables_to_check <- c("star_number", "Distance (Lightyears)", "STAR TEMPERATURE", "Relative Mass", "RADIUS", "relative luminosity")

are_all_numerical <- sapply(df[, variables_to_check], is.numeric)

if (all(are_all_numerical)) {
  message("All numerical variables are recognised as they should be")
} else {
  message("Not all numerical variables are recognised as they should be")}
```
### Q4
```{r}
num_observations <- nrow(df)

num_variables <- ncol(df)

missing_values <- colSums(is.na(df))

obs_with_missing <- sum(rowSums(is.na(df)) > 0)

metrics_df <- data.frame(
  Metric = c("Number of Observations", "Number of Variables", "Number of Missing Values (per variable)", "Number of Observations with at Least One Missing Value"),
  Value = c(num_observations, num_variables, toString(missing_values), obs_with_missing)
)


kable(metrics_df)
```

# 2 - Introductory Analysis

### Q5
```{r}
df_filtered <- df %>%
  filter(!is.na(`STAR TEMPERATURE`) & !is.na(`Relative Mass`))

ggplot(df_filtered, aes(x = `Relative Mass`, y = `STAR TEMPERATURE`)) +
  geom_point() +
  labs(title = "Temperature of a Star as a Function of its Mass",
       x = "Relative Mass",
       y = "STAR TEMPERATURE")
```
### Q6
```{r}
numerical_variables <- c("Relative Mass", "STAR TEMPERATURE", "RADIUS", "relative luminosity")

extreme_stars_df <- data.frame(Variable = character(), Star = numeric(), Value = numeric(), Extreme_Type = character(), stringsAsFactors = FALSE)

for (variable in numerical_variables) {

  most_extreme_index <- which.max(df[[variable]])
  least_extreme_index <- which.min(df[[variable]])

  most_extreme_star <- df[most_extreme_index, c("star_number", variable)]
  least_extreme_star <- df[least_extreme_index, c("star_number", variable)]

  extreme_stars_df <- bind_rows(
    extreme_stars_df,
    data.frame(
      Variable = rep(variable, 2),
      Star = c(most_extreme_star$star_number, least_extreme_star$star_number),
      Value = c(most_extreme_star[[variable]], least_extreme_star[[variable]]),
      Extreme_Type = c("Biggest Value", "Smallest Value")
    ) |>
      mutate(Star = as.numeric(Star))
  )
}
kable(extreme_stars_df)
```

# 3 - Factions

### Q8
```{r}
faction<-vroom(file=here("DataFolder/Allbtfactions.csv"),delim=":",na="_",show_col_types=FALSE)

controlling_faction<-vroom(file=here("DataFolder/SYTEM%FACTION.csv"),delim=":",na="NA",show_col_types=FALSE)
```

### Q9
```{r}
filtered_data <- controlling_faction |>
  filter(Faction_id %in% c('A', 'I', 'U'))

faction_counts <- table(filtered_data$Faction_id)

faction_counts_df <- data.frame(Faction_ID = names(faction_counts), Count = as.numeric(faction_counts))

kable(faction_counts_df)
```
### Q10
```{r}
num_stars_in_df <- length(unique(df$star_number))

num_stars_in_faction <- length(unique(controlling_faction$star_number))

num_missing_stars <- num_stars_in_df - num_stars_in_faction
```

There is `r num_missing_stars` missings stars in SYTEM%FACTION.csv

### Q11
```{r}
filtered_data_11 <- controlling_faction |>
  filter(!(Faction_id %in% c('A', 'I', 'U')))

merged_data_11<-inner_join(filtered_data_11, faction, by="Faction_id")

faction_counts <- merged_data_11 |>
  group_by(`Name Of The Faction`) |>
  summarise(Num_Star_Systems = n())

ggplot(faction_counts, aes(x = `Name Of The Faction`, y = Num_Star_Systems, fill = `Name Of The Faction`)) +
  geom_bar(stat = "identity") +
  labs(title = "Number of Star Systems Controlled by Each Faction",
       x = "Faction",
       y = "Number of Star Systems")
```
### Q12
```{r}
merged_data_12 <- inner_join(df, merged_data_11, by = "star_number")

filtered_data_12<-merged_data_12 |>
  group_by(`Name Of The Faction`)|>
  filter(n_distinct(star_number)>30)|>
  ungroup()

ggplot(filtered_data_12, aes(x = star_number, y = `Distance (Lightyears)`)) +
  geom_col() +
  labs(title = "Distance to the sun of star systems controlled by factions controlling more than 30 stars",
       x = "Star number",
       y = "Distance to the Sun (Lightyears)")+
  facet_wrap(~`Name Of The Faction`, ncol = 3) 
```
### Q13

```{r}
largest_stars <- merged_data_12 |>
  group_by(`Name Of The Faction`) |>
  slice(which.max(RADIUS))|>
  select(`Name Of The Faction`,star_number,RADIUS)

kable(largest_stars, caption = "Largest Star Controlled by Each Faction")
```

### Q14
```{r}
filtered_data_14 <- merged_data_12 %>%
  filter(`Initial Year` < 2830, is.na(`DISSOLUTION YEAR`) | `DISSOLUTION YEAR` >= 2830)

is_identical<-identical(merged_data_12,filtered_data_14)
if(is_identical) {
  message("Each faction controlling at least one star system in 2830 is active this year")
} else {
  message("Not each faction controlling at least one star system in 2830 is active this year")}
```

